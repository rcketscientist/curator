apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
//apply plugin: 'com.google.gms.google-services'

def versionMajor = 4
def versionMinor = 9
def versionPatch = 1
def versionBuild = 3

android {
    compileSdkVersion 23
    buildToolsVersion '24.0.2'

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
//        abortOnError false
    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 22

        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}" +                                 // Always include major and minor M.m
                ((versionPatch != 0 || versionBuild != 0) ? ".${versionPatch}" : "") +  // Discard patch and build only if both are zero M.m.p
                ((versionBuild != 0) ? ".${versionBuild}" : "")
        // Discard build only if build is zero M.m.p.bb
        // The current design does not allow versioning over 9.  Minor 10 would be 1 major.  Build allows up to 99.

        // Crashlytics doesn't support jack
//        jackOptions {
//            enabled true
//        }
    }

//    compileOptions {
//        sourceCompatibility JavaVersion.VERSION_1_8
//        targetCompatibility JavaVersion.VERSION_1_8
//    }

    signingConfigs {
        release {
            storeFile file("../key/my-release-key.keystore")
            storePassword "***REMOVED***"
            keyAlias "alias_name"
            keyPassword "***REMOVED***"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release
        }
        debug {
            // Disable fabric build ID generation for debug builds
            ext.enableCrashlytics = false
            jniDebuggable true
        }
    }

    productFlavors {
        // These fields handle flavorized authorities for providers
        final FIELD_META = "PROVIDER_AUTHORITY_META"
        final FIELD_SWAP = "PROVIDER_AUTHORITY_SWAP"
        final FIELD_KEYWORD = "PROVIDER_AUTHORITY_KEYWORD"
        final PROVIDER_META = "\"com.anthonymandra.content.MetaProvider\""
        final PROVIDER_SWAP = "\"com.anthonymandra.rawdroid.SwapProvider\""
        final PROVIDER_KEYWORD = "\"com.anthonymandra.content.KeywordProvider\""
        final PROVIDER_META_PRO = "\"com.anthonymandra.content.MetaProvider.pro\""
        final PROVIDER_SWAP_PRO = "\"com.anthonymandra.rawdroid.SwapProvider.pro\""
        final PROVIDER_KEYWORD_PRO = "\"com.anthonymandra.rawdroid.KeywordProvider.pro\""
        demo {
            applicationId 'com.anthonymandra.rawdroid'
            buildConfigField "String", FIELD_META, PROVIDER_META
            buildConfigField "String", FIELD_SWAP, PROVIDER_SWAP
            buildConfigField "String", FIELD_KEYWORD, PROVIDER_KEYWORD
        }
        pro {
            applicationId 'com.anthonymandra.rawdroidpro'
            buildConfigField "String", FIELD_META, PROVIDER_META_PRO
            buildConfigField "String", FIELD_SWAP, PROVIDER_SWAP_PRO
            buildConfigField "String", FIELD_KEYWORD, PROVIDER_KEYWORD_PRO
        }
        proAmazon {
            applicationId 'com.anthonymandra.rawdroidpro'
            buildConfigField "String", FIELD_META, PROVIDER_META_PRO
            buildConfigField "String", FIELD_SWAP, PROVIDER_SWAP_PRO
            buildConfigField "String", FIELD_KEYWORD, PROVIDER_KEYWORD_PRO
        }
    }
}

dependencies {
    compile project(':showcaseView:library')
    compile project(':inscription')
    compile project(':metadata-extractor')
    compile project(':rawprocessor')
    compile project(':DocumentActivity:library')
    //includes support-v4 and appcompat-v7
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }
    compile('com.crashlytics.sdk.android:crashlytics-ndk:1.1.2@aar') {
        transitive = true;
    }
    compile('com.afollestad:material-cab:0.1.12@aar') {
        transitive = true
    }
    testCompile 'junit:junit:4.12'
    androidTestCompile 'com.android.support:support-annotations:24.2.0'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    compile 'com.android.support:design:23.4.0'
    compile 'com.android.support:support-v4:23.4.0'
    compile 'com.github.bumptech.glide:glide:3.7.0'
}
crashlytics {
    enableNdk true
    androidNdkOut '../rawprocessor/obj'
    androidNdkLibsOut '../rawprocessor/libs'
}